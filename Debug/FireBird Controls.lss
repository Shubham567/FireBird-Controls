
FireBird Controls.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800200  00000892  00000926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080020e  0080020e  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000009a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eaa  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8d  00000000  00000000  000028e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000993  00000000  00000000  00003873  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  00004208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d00  00000000  00000000  000043ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000066d  00000000  00000000  000050ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	72 c0       	rjmp	.+228    	; 0xe6 <__ctors_end>
   2:	00 00       	nop
   4:	9e c0       	rjmp	.+316    	; 0x142 <__bad_interrupt>
   6:	00 00       	nop
   8:	9c c0       	rjmp	.+312    	; 0x142 <__bad_interrupt>
   a:	00 00       	nop
   c:	9a c0       	rjmp	.+308    	; 0x142 <__bad_interrupt>
   e:	00 00       	nop
  10:	98 c0       	rjmp	.+304    	; 0x142 <__bad_interrupt>
  12:	00 00       	nop
  14:	7c c1       	rjmp	.+760    	; 0x30e <__vector_5>
  16:	00 00       	nop
  18:	63 c1       	rjmp	.+710    	; 0x2e0 <__vector_6>
  1a:	00 00       	nop
  1c:	92 c0       	rjmp	.+292    	; 0x142 <__bad_interrupt>
  1e:	00 00       	nop
  20:	90 c0       	rjmp	.+288    	; 0x142 <__bad_interrupt>
  22:	00 00       	nop
  24:	8e c0       	rjmp	.+284    	; 0x142 <__bad_interrupt>
  26:	00 00       	nop
  28:	8c c0       	rjmp	.+280    	; 0x142 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8a c0       	rjmp	.+276    	; 0x142 <__bad_interrupt>
  2e:	00 00       	nop
  30:	88 c0       	rjmp	.+272    	; 0x142 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__bad_interrupt>
  36:	00 00       	nop
  38:	84 c0       	rjmp	.+264    	; 0x142 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	82 c0       	rjmp	.+260    	; 0x142 <__bad_interrupt>
  3e:	00 00       	nop
  40:	80 c0       	rjmp	.+256    	; 0x142 <__bad_interrupt>
  42:	00 00       	nop
  44:	7e c0       	rjmp	.+252    	; 0x142 <__bad_interrupt>
  46:	00 00       	nop
  48:	7c c0       	rjmp	.+248    	; 0x142 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7a c0       	rjmp	.+244    	; 0x142 <__bad_interrupt>
  4e:	00 00       	nop
  50:	78 c0       	rjmp	.+240    	; 0x142 <__bad_interrupt>
  52:	00 00       	nop
  54:	76 c0       	rjmp	.+236    	; 0x142 <__bad_interrupt>
  56:	00 00       	nop
  58:	74 c0       	rjmp	.+232    	; 0x142 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	72 c0       	rjmp	.+228    	; 0x142 <__bad_interrupt>
  5e:	00 00       	nop
  60:	70 c0       	rjmp	.+224    	; 0x142 <__bad_interrupt>
  62:	00 00       	nop
  64:	aa c1       	rjmp	.+852    	; 0x3ba <__vector_25>
  66:	00 00       	nop
  68:	6c c0       	rjmp	.+216    	; 0x142 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6a c0       	rjmp	.+212    	; 0x142 <__bad_interrupt>
  6e:	00 00       	nop
  70:	68 c0       	rjmp	.+208    	; 0x142 <__bad_interrupt>
  72:	00 00       	nop
  74:	66 c0       	rjmp	.+204    	; 0x142 <__bad_interrupt>
  76:	00 00       	nop
  78:	64 c0       	rjmp	.+200    	; 0x142 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	62 c0       	rjmp	.+196    	; 0x142 <__bad_interrupt>
  7e:	00 00       	nop
  80:	60 c0       	rjmp	.+192    	; 0x142 <__bad_interrupt>
  82:	00 00       	nop
  84:	5e c0       	rjmp	.+188    	; 0x142 <__bad_interrupt>
  86:	00 00       	nop
  88:	5c c0       	rjmp	.+184    	; 0x142 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	5a c0       	rjmp	.+180    	; 0x142 <__bad_interrupt>
  8e:	00 00       	nop
  90:	58 c0       	rjmp	.+176    	; 0x142 <__bad_interrupt>
  92:	00 00       	nop
  94:	56 c0       	rjmp	.+172    	; 0x142 <__bad_interrupt>
  96:	00 00       	nop
  98:	54 c0       	rjmp	.+168    	; 0x142 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	52 c0       	rjmp	.+164    	; 0x142 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	50 c0       	rjmp	.+160    	; 0x142 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	4e c0       	rjmp	.+156    	; 0x142 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	4c c0       	rjmp	.+152    	; 0x142 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	4a c0       	rjmp	.+148    	; 0x142 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	48 c0       	rjmp	.+144    	; 0x142 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	46 c0       	rjmp	.+140    	; 0x142 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	44 c0       	rjmp	.+136    	; 0x142 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	42 c0       	rjmp	.+132    	; 0x142 <__bad_interrupt>
  be:	00 00       	nop
  c0:	40 c0       	rjmp	.+128    	; 0x142 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	3e c0       	rjmp	.+124    	; 0x142 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	3c c0       	rjmp	.+120    	; 0x142 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	3a c0       	rjmp	.+116    	; 0x142 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	38 c0       	rjmp	.+112    	; 0x142 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	36 c0       	rjmp	.+108    	; 0x142 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	34 c0       	rjmp	.+104    	; 0x142 <__bad_interrupt>
  da:	00 00       	nop
  dc:	32 c0       	rjmp	.+100    	; 0x142 <__bad_interrupt>
  de:	00 00       	nop
  e0:	30 c0       	rjmp	.+96     	; 0x142 <__bad_interrupt>
	...

000000e4 <__ctors_start>:
  e4:	78 02       	muls	r23, r24

000000e6 <__ctors_end>:
  e6:	11 24       	eor	r1, r1
  e8:	1f be       	out	0x3f, r1	; 63
  ea:	cf ef       	ldi	r28, 0xFF	; 255
  ec:	d1 e2       	ldi	r29, 0x21	; 33
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	cd bf       	out	0x3d, r28	; 61
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	0c bf       	out	0x3c, r16	; 60

000000f6 <__do_copy_data>:
  f6:	12 e0       	ldi	r17, 0x02	; 2
  f8:	a0 e0       	ldi	r26, 0x00	; 0
  fa:	b2 e0       	ldi	r27, 0x02	; 2
  fc:	e2 e9       	ldi	r30, 0x92	; 146
  fe:	f8 e0       	ldi	r31, 0x08	; 8
 100:	00 e0       	ldi	r16, 0x00	; 0
 102:	0b bf       	out	0x3b, r16	; 59
 104:	02 c0       	rjmp	.+4      	; 0x10a <__do_copy_data+0x14>
 106:	07 90       	elpm	r0, Z+
 108:	0d 92       	st	X+, r0
 10a:	ae 30       	cpi	r26, 0x0E	; 14
 10c:	b1 07       	cpc	r27, r17
 10e:	d9 f7       	brne	.-10     	; 0x106 <__do_copy_data+0x10>

00000110 <__do_clear_bss>:
 110:	22 e0       	ldi	r18, 0x02	; 2
 112:	ae e0       	ldi	r26, 0x0E	; 14
 114:	b2 e0       	ldi	r27, 0x02	; 2
 116:	01 c0       	rjmp	.+2      	; 0x11a <.do_clear_bss_start>

00000118 <.do_clear_bss_loop>:
 118:	1d 92       	st	X+, r1

0000011a <.do_clear_bss_start>:
 11a:	ab 31       	cpi	r26, 0x1B	; 27
 11c:	b2 07       	cpc	r27, r18
 11e:	e1 f7       	brne	.-8      	; 0x118 <.do_clear_bss_loop>

00000120 <__do_global_ctors>:
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	c3 e7       	ldi	r28, 0x73	; 115
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	05 c0       	rjmp	.+10     	; 0x134 <__do_global_ctors+0x14>
 12a:	21 97       	sbiw	r28, 0x01	; 1
 12c:	01 09       	sbc	r16, r1
 12e:	80 2f       	mov	r24, r16
 130:	fe 01       	movw	r30, r28
 132:	a5 d3       	rcall	.+1866   	; 0x87e <__tablejump2__>
 134:	c2 37       	cpi	r28, 0x72	; 114
 136:	d1 07       	cpc	r29, r17
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 07       	cpc	r16, r24
 13c:	b1 f7       	brne	.-20     	; 0x12a <__do_global_ctors+0xa>
 13e:	cc d1       	rcall	.+920    	; 0x4d8 <main>
 140:	a6 c3       	rjmp	.+1868   	; 0x88e <_exit>

00000142 <__bad_interrupt>:
 142:	5e cf       	rjmp	.-324    	; 0x0 <__vectors>

00000144 <_Z15lcd_port_configv>:
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 144:	87 b1       	in	r24, 0x07	; 7
 146:	87 6f       	ori	r24, 0xF7	; 247
 148:	87 b9       	out	0x07, r24	; 7
 14a:	88 b1       	in	r24, 0x08	; 8
 14c:	80 78       	andi	r24, 0x80	; 128
 14e:	88 b9       	out	0x08, r24	; 8
 150:	08 95       	ret

00000152 <_Z12lcd_set_4bitv>:
 152:	86 e6       	ldi	r24, 0x66	; 102
 154:	9e e0       	ldi	r25, 0x0E	; 14
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <_Z12lcd_set_4bitv+0x4>
 15a:	00 00       	nop
 15c:	40 98       	cbi	0x08, 0	; 8
 15e:	41 98       	cbi	0x08, 1	; 8
 160:	80 e3       	ldi	r24, 0x30	; 48
 162:	88 b9       	out	0x08, r24	; 8
 164:	42 9a       	sbi	0x08, 2	; 8
 166:	ef ef       	ldi	r30, 0xFF	; 255
 168:	f7 e4       	ldi	r31, 0x47	; 71
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z12lcd_set_4bitv+0x18>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <_Z12lcd_set_4bitv+0x1e>
 170:	00 00       	nop
 172:	42 98       	cbi	0x08, 2	; 8
 174:	e6 e6       	ldi	r30, 0x66	; 102
 176:	fe e0       	ldi	r31, 0x0E	; 14
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <_Z12lcd_set_4bitv+0x26>
 17c:	00 00       	nop
 17e:	40 98       	cbi	0x08, 0	; 8
 180:	41 98       	cbi	0x08, 1	; 8
 182:	88 b9       	out	0x08, r24	; 8
 184:	42 9a       	sbi	0x08, 2	; 8
 186:	ef ef       	ldi	r30, 0xFF	; 255
 188:	f7 e4       	ldi	r31, 0x47	; 71
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <_Z12lcd_set_4bitv+0x38>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_Z12lcd_set_4bitv+0x3e>
 190:	00 00       	nop
 192:	42 98       	cbi	0x08, 2	; 8
 194:	e6 e6       	ldi	r30, 0x66	; 102
 196:	fe e0       	ldi	r31, 0x0E	; 14
 198:	31 97       	sbiw	r30, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z12lcd_set_4bitv+0x46>
 19c:	00 00       	nop
 19e:	40 98       	cbi	0x08, 0	; 8
 1a0:	41 98       	cbi	0x08, 1	; 8
 1a2:	88 b9       	out	0x08, r24	; 8
 1a4:	42 9a       	sbi	0x08, 2	; 8
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	97 e4       	ldi	r25, 0x47	; 71
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <_Z12lcd_set_4bitv+0x58>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <_Z12lcd_set_4bitv+0x5e>
 1b0:	00 00       	nop
 1b2:	42 98       	cbi	0x08, 2	; 8
 1b4:	e6 e6       	ldi	r30, 0x66	; 102
 1b6:	fe e0       	ldi	r31, 0x0E	; 14
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z12lcd_set_4bitv+0x66>
 1bc:	00 00       	nop
 1be:	40 98       	cbi	0x08, 0	; 8
 1c0:	41 98       	cbi	0x08, 1	; 8
 1c2:	80 e2       	ldi	r24, 0x20	; 32
 1c4:	88 b9       	out	0x08, r24	; 8
 1c6:	42 9a       	sbi	0x08, 2	; 8
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	97 e4       	ldi	r25, 0x47	; 71
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <_Z12lcd_set_4bitv+0x7a>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_Z12lcd_set_4bitv+0x80>
 1d2:	00 00       	nop
 1d4:	42 98       	cbi	0x08, 2	; 8
 1d6:	08 95       	ret

000001d8 <_Z14lcd_wr_commandh>:
 1d8:	98 b1       	in	r25, 0x08	; 8
 1da:	9f 70       	andi	r25, 0x0F	; 15
 1dc:	98 b9       	out	0x08, r25	; 8
 1de:	98 b1       	in	r25, 0x08	; 8
 1e0:	28 2f       	mov	r18, r24
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	92 2b       	or	r25, r18
 1e6:	98 b9       	out	0x08, r25	; 8
 1e8:	40 98       	cbi	0x08, 0	; 8
 1ea:	41 98       	cbi	0x08, 1	; 8
 1ec:	42 9a       	sbi	0x08, 2	; 8
 1ee:	ef ef       	ldi	r30, 0xFF	; 255
 1f0:	f7 e4       	ldi	r31, 0x47	; 71
 1f2:	31 97       	sbiw	r30, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <_Z14lcd_wr_commandh+0x1a>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <_Z14lcd_wr_commandh+0x20>
 1f8:	00 00       	nop
 1fa:	42 98       	cbi	0x08, 2	; 8
 1fc:	98 b1       	in	r25, 0x08	; 8
 1fe:	9f 70       	andi	r25, 0x0F	; 15
 200:	98 b9       	out	0x08, r25	; 8
 202:	98 b1       	in	r25, 0x08	; 8
 204:	82 95       	swap	r24
 206:	80 7f       	andi	r24, 0xF0	; 240
 208:	89 2b       	or	r24, r25
 20a:	88 b9       	out	0x08, r24	; 8
 20c:	40 98       	cbi	0x08, 0	; 8
 20e:	41 98       	cbi	0x08, 1	; 8
 210:	42 9a       	sbi	0x08, 2	; 8
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	97 e4       	ldi	r25, 0x47	; 71
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <_Z14lcd_wr_commandh+0x3e>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <_Z14lcd_wr_commandh+0x44>
 21c:	00 00       	nop
 21e:	42 98       	cbi	0x08, 2	; 8
 220:	08 95       	ret

00000222 <_Z8lcd_initv>:
 222:	97 df       	rcall	.-210    	; 0x152 <_Z12lcd_set_4bitv>
 224:	86 e6       	ldi	r24, 0x66	; 102
 226:	9e e0       	ldi	r25, 0x0E	; 14
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <_Z8lcd_initv+0x6>
 22c:	00 00       	nop
 22e:	88 e2       	ldi	r24, 0x28	; 40
 230:	d3 df       	rcall	.-90     	; 0x1d8 <_Z14lcd_wr_commandh>
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	d1 df       	rcall	.-94     	; 0x1d8 <_Z14lcd_wr_commandh>
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	cf df       	rcall	.-98     	; 0x1d8 <_Z14lcd_wr_commandh>
 23a:	8e e0       	ldi	r24, 0x0E	; 14
 23c:	cd df       	rcall	.-102    	; 0x1d8 <_Z14lcd_wr_commandh>
 23e:	80 e8       	ldi	r24, 0x80	; 128
 240:	cb cf       	rjmp	.-106    	; 0x1d8 <_Z14lcd_wr_commandh>
 242:	08 95       	ret

00000244 <_Z11lcd_wr_charc>:
 244:	98 b1       	in	r25, 0x08	; 8
 246:	9f 70       	andi	r25, 0x0F	; 15
 248:	98 b9       	out	0x08, r25	; 8
 24a:	98 b1       	in	r25, 0x08	; 8
 24c:	28 2f       	mov	r18, r24
 24e:	20 7f       	andi	r18, 0xF0	; 240
 250:	92 2b       	or	r25, r18
 252:	98 b9       	out	0x08, r25	; 8
 254:	40 9a       	sbi	0x08, 0	; 8
 256:	41 98       	cbi	0x08, 1	; 8
 258:	42 9a       	sbi	0x08, 2	; 8
 25a:	ef ef       	ldi	r30, 0xFF	; 255
 25c:	f7 e4       	ldi	r31, 0x47	; 71
 25e:	31 97       	sbiw	r30, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <_Z11lcd_wr_charc+0x1a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <_Z11lcd_wr_charc+0x20>
 264:	00 00       	nop
 266:	42 98       	cbi	0x08, 2	; 8
 268:	98 b1       	in	r25, 0x08	; 8
 26a:	9f 70       	andi	r25, 0x0F	; 15
 26c:	98 b9       	out	0x08, r25	; 8
 26e:	98 b1       	in	r25, 0x08	; 8
 270:	82 95       	swap	r24
 272:	80 7f       	andi	r24, 0xF0	; 240
 274:	89 2b       	or	r24, r25
 276:	88 b9       	out	0x08, r24	; 8
 278:	40 9a       	sbi	0x08, 0	; 8
 27a:	41 98       	cbi	0x08, 1	; 8
 27c:	42 9a       	sbi	0x08, 2	; 8
 27e:	8f ef       	ldi	r24, 0xFF	; 255
 280:	97 e4       	ldi	r25, 0x47	; 71
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <_Z11lcd_wr_charc+0x3e>
 286:	00 c0       	rjmp	.+0      	; 0x288 <_Z11lcd_wr_charc+0x44>
 288:	00 00       	nop
 28a:	42 98       	cbi	0x08, 2	; 8
 28c:	08 95       	ret

0000028e <_Z10lcd_stringPc>:
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	ec 01       	movw	r28, r24
 294:	88 81       	ld	r24, Y
 296:	88 23       	and	r24, r24
 298:	29 f0       	breq	.+10     	; 0x2a4 <_Z10lcd_stringPc+0x16>
 29a:	21 96       	adiw	r28, 0x01	; 1
 29c:	d3 df       	rcall	.-90     	; 0x244 <_Z11lcd_wr_charc>
 29e:	89 91       	ld	r24, Y+
 2a0:	81 11       	cpse	r24, r1
 2a2:	fc cf       	rjmp	.-8      	; 0x29c <_Z10lcd_stringPc+0xe>
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <_Z10lcd_cursorcc>:
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	69 f0       	breq	.+26     	; 0x2c8 <_Z10lcd_cursorcc+0x1e>
 2ae:	18 f4       	brcc	.+6      	; 0x2b6 <_Z10lcd_cursorcc+0xc>
 2b0:	81 30       	cpi	r24, 0x01	; 1
 2b2:	31 f0       	breq	.+12     	; 0x2c0 <_Z10lcd_cursorcc+0x16>
 2b4:	08 95       	ret
 2b6:	83 30       	cpi	r24, 0x03	; 3
 2b8:	59 f0       	breq	.+22     	; 0x2d0 <_Z10lcd_cursorcc+0x26>
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	69 f0       	breq	.+26     	; 0x2d8 <_Z10lcd_cursorcc+0x2e>
 2be:	08 95       	ret
 2c0:	8f e7       	ldi	r24, 0x7F	; 127
 2c2:	86 0f       	add	r24, r22
 2c4:	89 cf       	rjmp	.-238    	; 0x1d8 <_Z14lcd_wr_commandh>
 2c6:	08 95       	ret
 2c8:	8f eb       	ldi	r24, 0xBF	; 191
 2ca:	86 0f       	add	r24, r22
 2cc:	85 cf       	rjmp	.-246    	; 0x1d8 <_Z14lcd_wr_commandh>
 2ce:	08 95       	ret
 2d0:	83 e9       	ldi	r24, 0x93	; 147
 2d2:	86 0f       	add	r24, r22
 2d4:	81 cf       	rjmp	.-254    	; 0x1d8 <_Z14lcd_wr_commandh>
 2d6:	08 95       	ret
 2d8:	83 ed       	ldi	r24, 0xD3	; 211
 2da:	86 0f       	add	r24, r22
 2dc:	7d cf       	rjmp	.-262    	; 0x1d8 <_Z14lcd_wr_commandh>
 2de:	08 95       	ret

000002e0 <__vector_6>:

volatile unsigned int encoder::rightEnc = 0;
volatile unsigned int encoder::leftEnc = 0;

ISR(INT5_vect)
{
 2e0:	1f 92       	push	r1
 2e2:	0f 92       	push	r0
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	0f 92       	push	r0
 2e8:	11 24       	eor	r1, r1
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
	{
		leftEnc++;
	}
	static void incrRight()
	{
		rightEnc++;
 2ee:	80 91 19 02 	lds	r24, 0x0219	; 0x800219 <_ZN7encoder8rightEncE>
 2f2:	90 91 1a 02 	lds	r25, 0x021A	; 0x80021a <_ZN7encoder8rightEncE+0x1>
 2f6:	01 96       	adiw	r24, 0x01	; 1
 2f8:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <_ZN7encoder8rightEncE+0x1>
 2fc:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <_ZN7encoder8rightEncE>
volatile unsigned int encoder::leftEnc = 0;

ISR(INT5_vect)
{
	encoder::incrRight();
}
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	8f 93       	push	r24
 31a:	9f 93       	push	r25
		rightEnc = 0;
	}

	static void incrLeft()
	{
		leftEnc++;
 31c:	80 91 17 02 	lds	r24, 0x0217	; 0x800217 <_ZN7encoder7leftEncE>
 320:	90 91 18 02 	lds	r25, 0x0218	; 0x800218 <_ZN7encoder7leftEncE+0x1>
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <_ZN7encoder7leftEncE+0x1>
 32a:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <_ZN7encoder7leftEncE>

//ISR for left position encoder
ISR(INT4_vect)
{
	encoder::incrLeft();
}
 32e:	9f 91       	pop	r25
 330:	8f 91       	pop	r24
 332:	0f 90       	pop	r0
 334:	0f be       	out	0x3f, r0	; 63
 336:	0f 90       	pop	r0
 338:	1f 90       	pop	r1
 33a:	18 95       	reti

0000033c <_ZN6motion9pwmEnableEv>:
		sei();
	}

	void pwmEnable()
	{
		cli(); //disable all interrupts
 33c:	f8 94       	cli
		
		DDRA = DDRA | 0x0F;
 33e:	81 b1       	in	r24, 0x01	; 1
 340:	8f 60       	ori	r24, 0x0F	; 15
 342:	81 b9       	out	0x01, r24	; 1
		PORTA = PORTA & 0xF0;
 344:	82 b1       	in	r24, 0x02	; 2
 346:	80 7f       	andi	r24, 0xF0	; 240
 348:	82 b9       	out	0x02, r24	; 2
		DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 34a:	ea e0       	ldi	r30, 0x0A	; 10
 34c:	f1 e0       	ldi	r31, 0x01	; 1
 34e:	80 81       	ld	r24, Z
 350:	88 61       	ori	r24, 0x18	; 24
 352:	80 83       	st	Z, r24
		PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 354:	eb e0       	ldi	r30, 0x0B	; 11
 356:	f1 e0       	ldi	r31, 0x01	; 1
 358:	80 81       	ld	r24, Z
 35a:	88 61       	ori	r24, 0x18	; 24
 35c:	80 83       	st	Z, r24
		// Timer 5 initialized in PWM mode for velocity control
		// Prescale:256
		// PWM 8bit fast, TOP=0x00FF
		// Timer Frequency:225.000Hz
		 
		TCCR5B = 0x00;	//Stop
 35e:	e1 e2       	ldi	r30, 0x21	; 33
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	10 82       	st	Z, r1
		TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__TEXT_REGION_LENGTH__+0x700125>
		TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__TEXT_REGION_LENGTH__+0x700124>
		OCR5AH = 0x00;	//Output compare register high value for Left Motor
 370:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
		OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 374:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		OCR5BH = 0x00;	//Output compare register high value for Right Motor
 378:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
		OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 37c:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
		OCR5CH = 0x00;	//Output compare register high value for Motor C1
 380:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <__TEXT_REGION_LENGTH__+0x70012d>
		OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 384:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <__TEXT_REGION_LENGTH__+0x70012c>
		TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 388:	89 ea       	ldi	r24, 0xA9	; 169
 38a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__TEXT_REGION_LENGTH__+0x700120>
 						  For Overriding normal port functionality to OCRnA outputs.
				  		  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
		TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 38e:	8b e0       	ldi	r24, 0x0B	; 11
 390:	80 83       	st	Z, r24
		sei(); //re-enable interrupts
 392:	78 94       	sei
 394:	08 95       	ret

00000396 <_Z9XBEE_INITv>:
	XBEE::tx(data);
}*/

void XBEE_INIT()
{
	cli();
 396:	f8 94       	cli
	UCSR0B = 0x00; //disable while setting baud rate
 398:	e1 ec       	ldi	r30, 0xC1	; 193
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	10 82       	st	Z, r1
	UCSR0A = 0x00;
 39e:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
	UCSR0C = 0x06;
 3a2:	86 e0       	ldi	r24, 0x06	; 6
 3a4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	UBRR0L = 0x5F; //set baud rate lo
 3a8:	8f e5       	ldi	r24, 0x5F	; 95
 3aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
	UBRR0H = 0x00; //set baud rate hi
 3ae:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	UCSR0B = 0x98;
 3b2:	88 e9       	ldi	r24, 0x98	; 152
 3b4:	80 83       	st	Z, r24
	sei();
 3b6:	78 94       	sei
 3b8:	08 95       	ret

000003ba <__vector_25>:
short int dptr = 0;
buzzer buz;
motion move(1);
servo srv(1);
ISR(USART0_RX_vect)	 	// ISR for receive complete interrupt
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	0b b6       	in	r0, 0x3b	; 59
 3c6:	0f 92       	push	r0
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	ef 93       	push	r30
 3de:	ff 93       	push	r31
	unsigned char data = UDR0;
 3e0:	e6 ec       	ldi	r30, 0xC6	; 198
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	40 81       	ld	r20, Z
	UDR0 = data;
 3e6:	40 83       	st	Z, r20
	data_in[dptr++] = (char)data;
 3e8:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <dptr>
 3ec:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <dptr+0x1>
 3f0:	9c 01       	movw	r18, r24
 3f2:	2f 5f       	subi	r18, 0xFF	; 255
 3f4:	3f 4f       	sbci	r19, 0xFF	; 255
 3f6:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <dptr+0x1>
 3fa:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <dptr>
 3fe:	fc 01       	movw	r30, r24
 400:	ee 5e       	subi	r30, 0xEE	; 238
 402:	fd 4f       	sbci	r31, 0xFD	; 253
 404:	40 83       	st	Z, r20
	if(dptr == 4)
 406:	24 30       	cpi	r18, 0x04	; 4
 408:	31 05       	cpc	r19, r1
 40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	52 c0       	rjmp	.+164    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	{
		dptr = 0;
 40e:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <dptr+0x1>
 412:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <dptr>
		unsigned char com = data_in[0];
 416:	e2 e1       	ldi	r30, 0x12	; 18
 418:	f2 e0       	ldi	r31, 0x02	; 2
 41a:	80 81       	ld	r24, Z
		unsigned char val1 = data_in[1];
 41c:	61 81       	ldd	r22, Z+1	; 0x01
		unsigned char val2 = data_in[2];
 41e:	22 81       	ldd	r18, Z+2	; 0x02
		unsigned char valid = data_in[3];
 420:	93 81       	ldd	r25, Z+3	; 0x03

		if(com == '8' && valid == 'z')
 422:	88 33       	cpi	r24, 0x38	; 56
 424:	91 f4       	brne	.+36     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 426:	9a 37       	cpi	r25, 0x7A	; 122
 428:	09 f0       	breq	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	43 c0       	rjmp	.+134    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		OCR5AL = left_motor;
		OCR5BL = right_motor;
	}
	void foreward()
	{
		PORTA = PORTA & 0xF0;
 42c:	82 b1       	in	r24, 0x02	; 2
 42e:	80 7f       	andi	r24, 0xF0	; 240
 430:	82 b9       	out	0x02, r24	; 2
		PORTA = PORTA | 0x06;
 432:	82 b1       	in	r24, 0x02	; 2
 434:	86 60       	ori	r24, 0x06	; 6
 436:	82 b9       	out	0x02, r24	; 2

	

	void velocity (unsigned char left_motor, unsigned char right_motor)
	{
		leftMotor = left_motor;
 438:	ee e0       	ldi	r30, 0x0E	; 14
 43a:	f2 e0       	ldi	r31, 0x02	; 2
 43c:	60 83       	st	Z, r22
		rightMotor = right_motor;
 43e:	21 83       	std	Z+1, r18	; 0x01
		OCR5AL = left_motor;
 440:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		OCR5BL = right_motor;
 444:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 448:	34 c0       	rjmp	.+104    	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			move.foreward();
			move.velocity(val1,val2);
		}
		else if(com == '2' && valid == 'z')
 44a:	82 33       	cpi	r24, 0x32	; 50
 44c:	89 f4       	brne	.+34     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 44e:	9a 37       	cpi	r25, 0x7A	; 122
 450:	81 f5       	brne	.+96     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}


	void backward()
	{
		PORTA = PORTA & 0xF0;
 452:	82 b1       	in	r24, 0x02	; 2
 454:	80 7f       	andi	r24, 0xF0	; 240
 456:	82 b9       	out	0x02, r24	; 2
		PORTA = PORTA | 0x09;
 458:	82 b1       	in	r24, 0x02	; 2
 45a:	89 60       	ori	r24, 0x09	; 9
 45c:	82 b9       	out	0x02, r24	; 2

	

	void velocity (unsigned char left_motor, unsigned char right_motor)
	{
		leftMotor = left_motor;
 45e:	ee e0       	ldi	r30, 0x0E	; 14
 460:	f2 e0       	ldi	r31, 0x02	; 2
 462:	60 83       	st	Z, r22
		rightMotor = right_motor;
 464:	21 83       	std	Z+1, r18	; 0x01
		OCR5AL = left_motor;
 466:	60 93 28 01 	sts	0x0128, r22	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
		OCR5BL = right_motor;
 46a:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 46e:	21 c0       	rjmp	.+66     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			move.backward();
			move.velocity(val1,val2);
		}
		else if (com == 's' && valid == 'z')
 470:	83 37       	cpi	r24, 0x73	; 115
 472:	b1 f4       	brne	.+44     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 474:	9a 37       	cpi	r25, 0x7A	; 122
 476:	e9 f4       	brne	.+58     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}
	void servo_1(unsigned char degrees)
	{
		float PositionPanServo = 0;
		PositionPanServo = ((float)degrees / 1.86) + 35.0;
		OCR1AH = 0x00;
 478:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
		sei();
	}
	void servo_1(unsigned char degrees)
	{
		float PositionPanServo = 0;
		PositionPanServo = ((float)degrees / 1.86) + 35.0;
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	6f d1       	rcall	.+734    	; 0x762 <__floatunsisf>
 484:	2b e7       	ldi	r18, 0x7B	; 123
 486:	34 e1       	ldi	r19, 0x14	; 20
 488:	4e ee       	ldi	r20, 0xEE	; 238
 48a:	5f e3       	ldi	r21, 0x3F	; 63
 48c:	d6 d0       	rcall	.+428    	; 0x63a <__divsf3>
 48e:	20 e0       	ldi	r18, 0x00	; 0
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	4c e0       	ldi	r20, 0x0C	; 12
 494:	52 e4       	ldi	r21, 0x42	; 66
 496:	6d d0       	rcall	.+218    	; 0x572 <__addsf3>
		OCR1AH = 0x00;
		OCR1AL = (unsigned char) PositionPanServo;
 498:	38 d1       	rcall	.+624    	; 0x70a <__fixunssfsi>
 49a:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 49e:	09 c0       	rjmp	.+18     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
				srv.servo_1(val1);
		}
		else if (com == 'b' && valid == 'z')
 4a0:	82 36       	cpi	r24, 0x62	; 98
 4a2:	39 f4       	brne	.+14     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 4a4:	9a 37       	cpi	r25, 0x7A	; 122
 4a6:	29 f4       	brne	.+10     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
		{
			if(val1 == '1')
 4a8:	61 33       	cpi	r22, 0x31	; 49
 4aa:	11 f4       	brne	.+4      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		sei();
	}

	void beep()
	{
		PORTC = PORTC | 0x08;
 4ac:	43 9a       	sbi	0x08, 3	; 8
 4ae:	01 c0       	rjmp	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	}

	void mute()
	{
		PORTC = PORTC & 0xF7;
 4b0:	43 98       	cbi	0x08, 3	; 8
				buz.beep();
			else
				buz.mute();
		}
	}
}
 4b2:	ff 91       	pop	r31
 4b4:	ef 91       	pop	r30
 4b6:	bf 91       	pop	r27
 4b8:	af 91       	pop	r26
 4ba:	9f 91       	pop	r25
 4bc:	8f 91       	pop	r24
 4be:	7f 91       	pop	r23
 4c0:	6f 91       	pop	r22
 4c2:	5f 91       	pop	r21
 4c4:	4f 91       	pop	r20
 4c6:	3f 91       	pop	r19
 4c8:	2f 91       	pop	r18
 4ca:	0f 90       	pop	r0
 4cc:	0b be       	out	0x3b, r0	; 59
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti

000004d8 <main>:

int main(void)
{
	XBEE_INIT();
 4d8:	5e df       	rcall	.-324    	; 0x396 <_Z9XBEE_INITv>
{
	public:

	LCD()
	{
		cli();
 4da:	f8 94       	cli
		lcd_port_config();
 4dc:	33 de       	rcall	.-922    	; 0x144 <_Z15lcd_port_configv>
		sei();
 4de:	78 94       	sei
		lcd_init();
 4e0:	a0 de       	rcall	.-704    	; 0x222 <_Z8lcd_initv>
		lcd_cursor(row,col);
	}

	void writeString(char *str)
	{
		lcd_string(str);
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	92 e0       	ldi	r25, 0x02	; 2
 4e6:	d3 de       	rcall	.-602    	; 0x28e <_Z10lcd_stringPc>
		lcd_init();
	}

	void moveCursor(short int row,short int col)
	{
		lcd_cursor(row,col);
 4e8:	61 e0       	ldi	r22, 0x01	; 1
 4ea:	82 e0       	ldi	r24, 0x02	; 2
 4ec:	de de       	rcall	.-580    	; 0x2aa <_Z10lcd_cursorcc>
	LCD disp;
	disp.writeString("BIRD ON FIRE");
	disp.moveCursor(2,1);
	while(1);
 4ee:	ff cf       	rjmp	.-2      	; 0x4ee <main+0x16>

000004f0 <_GLOBAL__sub_I_temp>:
{
	public:

	buzzer()
	{
		cli();
 4f0:	f8 94       	cli
		DDRC = DDRC | 0x08;
 4f2:	3b 9a       	sbi	0x07, 3	; 7
		PORTC = PORTC & 0xF7;
 4f4:	43 98       	cbi	0x08, 3	; 8
		sei();
 4f6:	78 94       	sei
	unsigned char rightMotor;
	public:

	motion()
	{
		cli();
 4f8:	f8 94       	cli
		DDRA = DDRA | 0x0F;
 4fa:	81 b1       	in	r24, 0x01	; 1
 4fc:	8f 60       	ori	r24, 0x0F	; 15
 4fe:	81 b9       	out	0x01, r24	; 1
		PORTA = PORTA & 0xF0;
 500:	82 b1       	in	r24, 0x02	; 2
 502:	80 7f       	andi	r24, 0xF0	; 240
 504:	82 b9       	out	0x02, r24	; 2
		DDRL = DDRL | 0x18;
 506:	ea e0       	ldi	r30, 0x0A	; 10
 508:	f1 e0       	ldi	r31, 0x01	; 1
 50a:	80 81       	ld	r24, Z
 50c:	88 61       	ori	r24, 0x18	; 24
 50e:	80 83       	st	Z, r24
		PORTL = PORTL | 0x18;
 510:	eb e0       	ldi	r30, 0x0B	; 11
 512:	f1 e0       	ldi	r31, 0x01	; 1
 514:	80 81       	ld	r24, Z
 516:	88 61       	ori	r24, 0x18	; 24
 518:	80 83       	st	Z, r24
		sei();
 51a:	78 94       	sei
	}

	motion(short int x)
	{
		motion();
		pwmEnable();
 51c:	8e e0       	ldi	r24, 0x0E	; 14
 51e:	92 e0       	ldi	r25, 0x02	; 2
 520:	0d df       	rcall	.-486    	; 0x33c <_ZN6motion9pwmEnableEv>

	public:

	servo(int numServo = 1)
	{
		cli();
 522:	f8 94       	cli
//SERVO FROM HERE
class servo
{
	void servo1_pin_config (void)
	{
		DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
 524:	25 9a       	sbi	0x04, 5	; 4
		PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
 526:	2d 9a       	sbi	0x05, 5	; 5
		if(numServo == 2)
			servo2_pin_config();
		else if ( numServo == 3)
			servo3_pin_config();

		TCCR1B = 0x00; //stop
 528:	e1 e8       	ldi	r30, 0x81	; 129
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	10 82       	st	Z, r1
		TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
 52e:	8c ef       	ldi	r24, 0xFC	; 252
 530:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__TEXT_REGION_LENGTH__+0x700085>
		TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x700084>
		OCR1AH = 0x03;	//Output compare Register high value for servo 1
 53a:	93 e0       	ldi	r25, 0x03	; 3
 53c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
		OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
 540:	8f ef       	ldi	r24, 0xFF	; 255
 542:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
		OCR1BH = 0x03;	//Output compare Register high value for servo 2
 546:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x70008b>
		OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
 54a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x70008a>
		OCR1CH = 0x03;	//Output compare Register high value for servo 3
 54e:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x70008d>
		OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
 552:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x70008c>
		ICR1H  = 0x03;	
 556:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
		ICR1L  = 0xFF;
 55a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
		TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
 55e:	8b ea       	ldi	r24, 0xAB	; 171
 560:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x700080>
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
		TCCR1C = 0x00;
 564:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x700082>
		TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
 568:	8c e0       	ldi	r24, 0x0C	; 12
 56a:	80 83       	st	Z, r24
		sei();
 56c:	78 94       	sei
 56e:	08 95       	ret

00000570 <__subsf3>:
 570:	50 58       	subi	r21, 0x80	; 128

00000572 <__addsf3>:
 572:	bb 27       	eor	r27, r27
 574:	aa 27       	eor	r26, r26
 576:	0e d0       	rcall	.+28     	; 0x594 <__addsf3x>
 578:	48 c1       	rjmp	.+656    	; 0x80a <__fp_round>
 57a:	39 d1       	rcall	.+626    	; 0x7ee <__fp_pscA>
 57c:	30 f0       	brcs	.+12     	; 0x58a <__addsf3+0x18>
 57e:	3e d1       	rcall	.+636    	; 0x7fc <__fp_pscB>
 580:	20 f0       	brcs	.+8      	; 0x58a <__addsf3+0x18>
 582:	31 f4       	brne	.+12     	; 0x590 <__addsf3+0x1e>
 584:	9f 3f       	cpi	r25, 0xFF	; 255
 586:	11 f4       	brne	.+4      	; 0x58c <__addsf3+0x1a>
 588:	1e f4       	brtc	.+6      	; 0x590 <__addsf3+0x1e>
 58a:	2e c1       	rjmp	.+604    	; 0x7e8 <__fp_nan>
 58c:	0e f4       	brtc	.+2      	; 0x590 <__addsf3+0x1e>
 58e:	e0 95       	com	r30
 590:	e7 fb       	bst	r30, 7
 592:	24 c1       	rjmp	.+584    	; 0x7dc <__fp_inf>

00000594 <__addsf3x>:
 594:	e9 2f       	mov	r30, r25
 596:	4a d1       	rcall	.+660    	; 0x82c <__fp_split3>
 598:	80 f3       	brcs	.-32     	; 0x57a <__addsf3+0x8>
 59a:	ba 17       	cp	r27, r26
 59c:	62 07       	cpc	r22, r18
 59e:	73 07       	cpc	r23, r19
 5a0:	84 07       	cpc	r24, r20
 5a2:	95 07       	cpc	r25, r21
 5a4:	18 f0       	brcs	.+6      	; 0x5ac <__addsf3x+0x18>
 5a6:	71 f4       	brne	.+28     	; 0x5c4 <__addsf3x+0x30>
 5a8:	9e f5       	brtc	.+102    	; 0x610 <__addsf3x+0x7c>
 5aa:	62 c1       	rjmp	.+708    	; 0x870 <__fp_zero>
 5ac:	0e f4       	brtc	.+2      	; 0x5b0 <__addsf3x+0x1c>
 5ae:	e0 95       	com	r30
 5b0:	0b 2e       	mov	r0, r27
 5b2:	ba 2f       	mov	r27, r26
 5b4:	a0 2d       	mov	r26, r0
 5b6:	0b 01       	movw	r0, r22
 5b8:	b9 01       	movw	r22, r18
 5ba:	90 01       	movw	r18, r0
 5bc:	0c 01       	movw	r0, r24
 5be:	ca 01       	movw	r24, r20
 5c0:	a0 01       	movw	r20, r0
 5c2:	11 24       	eor	r1, r1
 5c4:	ff 27       	eor	r31, r31
 5c6:	59 1b       	sub	r21, r25
 5c8:	99 f0       	breq	.+38     	; 0x5f0 <__addsf3x+0x5c>
 5ca:	59 3f       	cpi	r21, 0xF9	; 249
 5cc:	50 f4       	brcc	.+20     	; 0x5e2 <__addsf3x+0x4e>
 5ce:	50 3e       	cpi	r21, 0xE0	; 224
 5d0:	68 f1       	brcs	.+90     	; 0x62c <__addsf3x+0x98>
 5d2:	1a 16       	cp	r1, r26
 5d4:	f0 40       	sbci	r31, 0x00	; 0
 5d6:	a2 2f       	mov	r26, r18
 5d8:	23 2f       	mov	r18, r19
 5da:	34 2f       	mov	r19, r20
 5dc:	44 27       	eor	r20, r20
 5de:	58 5f       	subi	r21, 0xF8	; 248
 5e0:	f3 cf       	rjmp	.-26     	; 0x5c8 <__addsf3x+0x34>
 5e2:	46 95       	lsr	r20
 5e4:	37 95       	ror	r19
 5e6:	27 95       	ror	r18
 5e8:	a7 95       	ror	r26
 5ea:	f0 40       	sbci	r31, 0x00	; 0
 5ec:	53 95       	inc	r21
 5ee:	c9 f7       	brne	.-14     	; 0x5e2 <__addsf3x+0x4e>
 5f0:	7e f4       	brtc	.+30     	; 0x610 <__addsf3x+0x7c>
 5f2:	1f 16       	cp	r1, r31
 5f4:	ba 0b       	sbc	r27, r26
 5f6:	62 0b       	sbc	r22, r18
 5f8:	73 0b       	sbc	r23, r19
 5fa:	84 0b       	sbc	r24, r20
 5fc:	ba f0       	brmi	.+46     	; 0x62c <__addsf3x+0x98>
 5fe:	91 50       	subi	r25, 0x01	; 1
 600:	a1 f0       	breq	.+40     	; 0x62a <__addsf3x+0x96>
 602:	ff 0f       	add	r31, r31
 604:	bb 1f       	adc	r27, r27
 606:	66 1f       	adc	r22, r22
 608:	77 1f       	adc	r23, r23
 60a:	88 1f       	adc	r24, r24
 60c:	c2 f7       	brpl	.-16     	; 0x5fe <__addsf3x+0x6a>
 60e:	0e c0       	rjmp	.+28     	; 0x62c <__addsf3x+0x98>
 610:	ba 0f       	add	r27, r26
 612:	62 1f       	adc	r22, r18
 614:	73 1f       	adc	r23, r19
 616:	84 1f       	adc	r24, r20
 618:	48 f4       	brcc	.+18     	; 0x62c <__addsf3x+0x98>
 61a:	87 95       	ror	r24
 61c:	77 95       	ror	r23
 61e:	67 95       	ror	r22
 620:	b7 95       	ror	r27
 622:	f7 95       	ror	r31
 624:	9e 3f       	cpi	r25, 0xFE	; 254
 626:	08 f0       	brcs	.+2      	; 0x62a <__addsf3x+0x96>
 628:	b3 cf       	rjmp	.-154    	; 0x590 <__addsf3+0x1e>
 62a:	93 95       	inc	r25
 62c:	88 0f       	add	r24, r24
 62e:	08 f0       	brcs	.+2      	; 0x632 <__addsf3x+0x9e>
 630:	99 27       	eor	r25, r25
 632:	ee 0f       	add	r30, r30
 634:	97 95       	ror	r25
 636:	87 95       	ror	r24
 638:	08 95       	ret

0000063a <__divsf3>:
 63a:	0c d0       	rcall	.+24     	; 0x654 <__divsf3x>
 63c:	e6 c0       	rjmp	.+460    	; 0x80a <__fp_round>
 63e:	de d0       	rcall	.+444    	; 0x7fc <__fp_pscB>
 640:	40 f0       	brcs	.+16     	; 0x652 <__divsf3+0x18>
 642:	d5 d0       	rcall	.+426    	; 0x7ee <__fp_pscA>
 644:	30 f0       	brcs	.+12     	; 0x652 <__divsf3+0x18>
 646:	21 f4       	brne	.+8      	; 0x650 <__divsf3+0x16>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	19 f0       	breq	.+6      	; 0x652 <__divsf3+0x18>
 64c:	c7 c0       	rjmp	.+398    	; 0x7dc <__fp_inf>
 64e:	51 11       	cpse	r21, r1
 650:	10 c1       	rjmp	.+544    	; 0x872 <__fp_szero>
 652:	ca c0       	rjmp	.+404    	; 0x7e8 <__fp_nan>

00000654 <__divsf3x>:
 654:	eb d0       	rcall	.+470    	; 0x82c <__fp_split3>
 656:	98 f3       	brcs	.-26     	; 0x63e <__divsf3+0x4>

00000658 <__divsf3_pse>:
 658:	99 23       	and	r25, r25
 65a:	c9 f3       	breq	.-14     	; 0x64e <__divsf3+0x14>
 65c:	55 23       	and	r21, r21
 65e:	b1 f3       	breq	.-20     	; 0x64c <__divsf3+0x12>
 660:	95 1b       	sub	r25, r21
 662:	55 0b       	sbc	r21, r21
 664:	bb 27       	eor	r27, r27
 666:	aa 27       	eor	r26, r26
 668:	62 17       	cp	r22, r18
 66a:	73 07       	cpc	r23, r19
 66c:	84 07       	cpc	r24, r20
 66e:	38 f0       	brcs	.+14     	; 0x67e <__divsf3_pse+0x26>
 670:	9f 5f       	subi	r25, 0xFF	; 255
 672:	5f 4f       	sbci	r21, 0xFF	; 255
 674:	22 0f       	add	r18, r18
 676:	33 1f       	adc	r19, r19
 678:	44 1f       	adc	r20, r20
 67a:	aa 1f       	adc	r26, r26
 67c:	a9 f3       	breq	.-22     	; 0x668 <__divsf3_pse+0x10>
 67e:	33 d0       	rcall	.+102    	; 0x6e6 <__divsf3_pse+0x8e>
 680:	0e 2e       	mov	r0, r30
 682:	3a f0       	brmi	.+14     	; 0x692 <__divsf3_pse+0x3a>
 684:	e0 e8       	ldi	r30, 0x80	; 128
 686:	30 d0       	rcall	.+96     	; 0x6e8 <__divsf3_pse+0x90>
 688:	91 50       	subi	r25, 0x01	; 1
 68a:	50 40       	sbci	r21, 0x00	; 0
 68c:	e6 95       	lsr	r30
 68e:	00 1c       	adc	r0, r0
 690:	ca f7       	brpl	.-14     	; 0x684 <__divsf3_pse+0x2c>
 692:	29 d0       	rcall	.+82     	; 0x6e6 <__divsf3_pse+0x8e>
 694:	fe 2f       	mov	r31, r30
 696:	27 d0       	rcall	.+78     	; 0x6e6 <__divsf3_pse+0x8e>
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	bb 1f       	adc	r27, r27
 6a0:	26 17       	cp	r18, r22
 6a2:	37 07       	cpc	r19, r23
 6a4:	48 07       	cpc	r20, r24
 6a6:	ab 07       	cpc	r26, r27
 6a8:	b0 e8       	ldi	r27, 0x80	; 128
 6aa:	09 f0       	breq	.+2      	; 0x6ae <__divsf3_pse+0x56>
 6ac:	bb 0b       	sbc	r27, r27
 6ae:	80 2d       	mov	r24, r0
 6b0:	bf 01       	movw	r22, r30
 6b2:	ff 27       	eor	r31, r31
 6b4:	93 58       	subi	r25, 0x83	; 131
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255
 6b8:	2a f0       	brmi	.+10     	; 0x6c4 <__divsf3_pse+0x6c>
 6ba:	9e 3f       	cpi	r25, 0xFE	; 254
 6bc:	51 05       	cpc	r21, r1
 6be:	68 f0       	brcs	.+26     	; 0x6da <__divsf3_pse+0x82>
 6c0:	8d c0       	rjmp	.+282    	; 0x7dc <__fp_inf>
 6c2:	d7 c0       	rjmp	.+430    	; 0x872 <__fp_szero>
 6c4:	5f 3f       	cpi	r21, 0xFF	; 255
 6c6:	ec f3       	brlt	.-6      	; 0x6c2 <__divsf3_pse+0x6a>
 6c8:	98 3e       	cpi	r25, 0xE8	; 232
 6ca:	dc f3       	brlt	.-10     	; 0x6c2 <__divsf3_pse+0x6a>
 6cc:	86 95       	lsr	r24
 6ce:	77 95       	ror	r23
 6d0:	67 95       	ror	r22
 6d2:	b7 95       	ror	r27
 6d4:	f7 95       	ror	r31
 6d6:	9f 5f       	subi	r25, 0xFF	; 255
 6d8:	c9 f7       	brne	.-14     	; 0x6cc <__divsf3_pse+0x74>
 6da:	88 0f       	add	r24, r24
 6dc:	91 1d       	adc	r25, r1
 6de:	96 95       	lsr	r25
 6e0:	87 95       	ror	r24
 6e2:	97 f9       	bld	r25, 7
 6e4:	08 95       	ret
 6e6:	e1 e0       	ldi	r30, 0x01	; 1
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	bb 1f       	adc	r27, r27
 6f0:	62 17       	cp	r22, r18
 6f2:	73 07       	cpc	r23, r19
 6f4:	84 07       	cpc	r24, r20
 6f6:	ba 07       	cpc	r27, r26
 6f8:	20 f0       	brcs	.+8      	; 0x702 <__divsf3_pse+0xaa>
 6fa:	62 1b       	sub	r22, r18
 6fc:	73 0b       	sbc	r23, r19
 6fe:	84 0b       	sbc	r24, r20
 700:	ba 0b       	sbc	r27, r26
 702:	ee 1f       	adc	r30, r30
 704:	88 f7       	brcc	.-30     	; 0x6e8 <__divsf3_pse+0x90>
 706:	e0 95       	com	r30
 708:	08 95       	ret

0000070a <__fixunssfsi>:
 70a:	98 d0       	rcall	.+304    	; 0x83c <__fp_splitA>
 70c:	88 f0       	brcs	.+34     	; 0x730 <__fixunssfsi+0x26>
 70e:	9f 57       	subi	r25, 0x7F	; 127
 710:	90 f0       	brcs	.+36     	; 0x736 <__fixunssfsi+0x2c>
 712:	b9 2f       	mov	r27, r25
 714:	99 27       	eor	r25, r25
 716:	b7 51       	subi	r27, 0x17	; 23
 718:	a0 f0       	brcs	.+40     	; 0x742 <__fixunssfsi+0x38>
 71a:	d1 f0       	breq	.+52     	; 0x750 <__fixunssfsi+0x46>
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	1a f0       	brmi	.+6      	; 0x72c <__fixunssfsi+0x22>
 726:	ba 95       	dec	r27
 728:	c9 f7       	brne	.-14     	; 0x71c <__fixunssfsi+0x12>
 72a:	12 c0       	rjmp	.+36     	; 0x750 <__fixunssfsi+0x46>
 72c:	b1 30       	cpi	r27, 0x01	; 1
 72e:	81 f0       	breq	.+32     	; 0x750 <__fixunssfsi+0x46>
 730:	9f d0       	rcall	.+318    	; 0x870 <__fp_zero>
 732:	b1 e0       	ldi	r27, 0x01	; 1
 734:	08 95       	ret
 736:	9c c0       	rjmp	.+312    	; 0x870 <__fp_zero>
 738:	67 2f       	mov	r22, r23
 73a:	78 2f       	mov	r23, r24
 73c:	88 27       	eor	r24, r24
 73e:	b8 5f       	subi	r27, 0xF8	; 248
 740:	39 f0       	breq	.+14     	; 0x750 <__fixunssfsi+0x46>
 742:	b9 3f       	cpi	r27, 0xF9	; 249
 744:	cc f3       	brlt	.-14     	; 0x738 <__fixunssfsi+0x2e>
 746:	86 95       	lsr	r24
 748:	77 95       	ror	r23
 74a:	67 95       	ror	r22
 74c:	b3 95       	inc	r27
 74e:	d9 f7       	brne	.-10     	; 0x746 <__fixunssfsi+0x3c>
 750:	3e f4       	brtc	.+14     	; 0x760 <__fixunssfsi+0x56>
 752:	90 95       	com	r25
 754:	80 95       	com	r24
 756:	70 95       	com	r23
 758:	61 95       	neg	r22
 75a:	7f 4f       	sbci	r23, 0xFF	; 255
 75c:	8f 4f       	sbci	r24, 0xFF	; 255
 75e:	9f 4f       	sbci	r25, 0xFF	; 255
 760:	08 95       	ret

00000762 <__floatunsisf>:
 762:	e8 94       	clt
 764:	09 c0       	rjmp	.+18     	; 0x778 <__floatsisf+0x12>

00000766 <__floatsisf>:
 766:	97 fb       	bst	r25, 7
 768:	3e f4       	brtc	.+14     	; 0x778 <__floatsisf+0x12>
 76a:	90 95       	com	r25
 76c:	80 95       	com	r24
 76e:	70 95       	com	r23
 770:	61 95       	neg	r22
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	99 23       	and	r25, r25
 77a:	a9 f0       	breq	.+42     	; 0x7a6 <__floatsisf+0x40>
 77c:	f9 2f       	mov	r31, r25
 77e:	96 e9       	ldi	r25, 0x96	; 150
 780:	bb 27       	eor	r27, r27
 782:	93 95       	inc	r25
 784:	f6 95       	lsr	r31
 786:	87 95       	ror	r24
 788:	77 95       	ror	r23
 78a:	67 95       	ror	r22
 78c:	b7 95       	ror	r27
 78e:	f1 11       	cpse	r31, r1
 790:	f8 cf       	rjmp	.-16     	; 0x782 <__floatsisf+0x1c>
 792:	fa f4       	brpl	.+62     	; 0x7d2 <__floatsisf+0x6c>
 794:	bb 0f       	add	r27, r27
 796:	11 f4       	brne	.+4      	; 0x79c <__floatsisf+0x36>
 798:	60 ff       	sbrs	r22, 0
 79a:	1b c0       	rjmp	.+54     	; 0x7d2 <__floatsisf+0x6c>
 79c:	6f 5f       	subi	r22, 0xFF	; 255
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	16 c0       	rjmp	.+44     	; 0x7d2 <__floatsisf+0x6c>
 7a6:	88 23       	and	r24, r24
 7a8:	11 f0       	breq	.+4      	; 0x7ae <__floatsisf+0x48>
 7aa:	96 e9       	ldi	r25, 0x96	; 150
 7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <__floatsisf+0x6a>
 7ae:	77 23       	and	r23, r23
 7b0:	21 f0       	breq	.+8      	; 0x7ba <__floatsisf+0x54>
 7b2:	9e e8       	ldi	r25, 0x8E	; 142
 7b4:	87 2f       	mov	r24, r23
 7b6:	76 2f       	mov	r23, r22
 7b8:	05 c0       	rjmp	.+10     	; 0x7c4 <__floatsisf+0x5e>
 7ba:	66 23       	and	r22, r22
 7bc:	71 f0       	breq	.+28     	; 0x7da <__floatsisf+0x74>
 7be:	96 e8       	ldi	r25, 0x86	; 134
 7c0:	86 2f       	mov	r24, r22
 7c2:	70 e0       	ldi	r23, 0x00	; 0
 7c4:	60 e0       	ldi	r22, 0x00	; 0
 7c6:	2a f0       	brmi	.+10     	; 0x7d2 <__floatsisf+0x6c>
 7c8:	9a 95       	dec	r25
 7ca:	66 0f       	add	r22, r22
 7cc:	77 1f       	adc	r23, r23
 7ce:	88 1f       	adc	r24, r24
 7d0:	da f7       	brpl	.-10     	; 0x7c8 <__floatsisf+0x62>
 7d2:	88 0f       	add	r24, r24
 7d4:	96 95       	lsr	r25
 7d6:	87 95       	ror	r24
 7d8:	97 f9       	bld	r25, 7
 7da:	08 95       	ret

000007dc <__fp_inf>:
 7dc:	97 f9       	bld	r25, 7
 7de:	9f 67       	ori	r25, 0x7F	; 127
 7e0:	80 e8       	ldi	r24, 0x80	; 128
 7e2:	70 e0       	ldi	r23, 0x00	; 0
 7e4:	60 e0       	ldi	r22, 0x00	; 0
 7e6:	08 95       	ret

000007e8 <__fp_nan>:
 7e8:	9f ef       	ldi	r25, 0xFF	; 255
 7ea:	80 ec       	ldi	r24, 0xC0	; 192
 7ec:	08 95       	ret

000007ee <__fp_pscA>:
 7ee:	00 24       	eor	r0, r0
 7f0:	0a 94       	dec	r0
 7f2:	16 16       	cp	r1, r22
 7f4:	17 06       	cpc	r1, r23
 7f6:	18 06       	cpc	r1, r24
 7f8:	09 06       	cpc	r0, r25
 7fa:	08 95       	ret

000007fc <__fp_pscB>:
 7fc:	00 24       	eor	r0, r0
 7fe:	0a 94       	dec	r0
 800:	12 16       	cp	r1, r18
 802:	13 06       	cpc	r1, r19
 804:	14 06       	cpc	r1, r20
 806:	05 06       	cpc	r0, r21
 808:	08 95       	ret

0000080a <__fp_round>:
 80a:	09 2e       	mov	r0, r25
 80c:	03 94       	inc	r0
 80e:	00 0c       	add	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <__fp_round+0xc>
 812:	88 23       	and	r24, r24
 814:	52 f0       	brmi	.+20     	; 0x82a <__fp_round+0x20>
 816:	bb 0f       	add	r27, r27
 818:	40 f4       	brcc	.+16     	; 0x82a <__fp_round+0x20>
 81a:	bf 2b       	or	r27, r31
 81c:	11 f4       	brne	.+4      	; 0x822 <__fp_round+0x18>
 81e:	60 ff       	sbrs	r22, 0
 820:	04 c0       	rjmp	.+8      	; 0x82a <__fp_round+0x20>
 822:	6f 5f       	subi	r22, 0xFF	; 255
 824:	7f 4f       	sbci	r23, 0xFF	; 255
 826:	8f 4f       	sbci	r24, 0xFF	; 255
 828:	9f 4f       	sbci	r25, 0xFF	; 255
 82a:	08 95       	ret

0000082c <__fp_split3>:
 82c:	57 fd       	sbrc	r21, 7
 82e:	90 58       	subi	r25, 0x80	; 128
 830:	44 0f       	add	r20, r20
 832:	55 1f       	adc	r21, r21
 834:	59 f0       	breq	.+22     	; 0x84c <__fp_splitA+0x10>
 836:	5f 3f       	cpi	r21, 0xFF	; 255
 838:	71 f0       	breq	.+28     	; 0x856 <__fp_splitA+0x1a>
 83a:	47 95       	ror	r20

0000083c <__fp_splitA>:
 83c:	88 0f       	add	r24, r24
 83e:	97 fb       	bst	r25, 7
 840:	99 1f       	adc	r25, r25
 842:	61 f0       	breq	.+24     	; 0x85c <__fp_splitA+0x20>
 844:	9f 3f       	cpi	r25, 0xFF	; 255
 846:	79 f0       	breq	.+30     	; 0x866 <__fp_splitA+0x2a>
 848:	87 95       	ror	r24
 84a:	08 95       	ret
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	55 1f       	adc	r21, r21
 854:	f2 cf       	rjmp	.-28     	; 0x83a <__fp_split3+0xe>
 856:	46 95       	lsr	r20
 858:	f1 df       	rcall	.-30     	; 0x83c <__fp_splitA>
 85a:	08 c0       	rjmp	.+16     	; 0x86c <__fp_splitA+0x30>
 85c:	16 16       	cp	r1, r22
 85e:	17 06       	cpc	r1, r23
 860:	18 06       	cpc	r1, r24
 862:	99 1f       	adc	r25, r25
 864:	f1 cf       	rjmp	.-30     	; 0x848 <__fp_splitA+0xc>
 866:	86 95       	lsr	r24
 868:	71 05       	cpc	r23, r1
 86a:	61 05       	cpc	r22, r1
 86c:	08 94       	sec
 86e:	08 95       	ret

00000870 <__fp_zero>:
 870:	e8 94       	clt

00000872 <__fp_szero>:
 872:	bb 27       	eor	r27, r27
 874:	66 27       	eor	r22, r22
 876:	77 27       	eor	r23, r23
 878:	cb 01       	movw	r24, r22
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__tablejump2__>:
 87e:	ee 0f       	add	r30, r30
 880:	ff 1f       	adc	r31, r31
 882:	88 1f       	adc	r24, r24
 884:	8b bf       	out	0x3b, r24	; 59
 886:	07 90       	elpm	r0, Z+
 888:	f6 91       	elpm	r31, Z
 88a:	e0 2d       	mov	r30, r0
 88c:	19 94       	eijmp

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
